
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module DE10_LITE_Golden_Top(

	//////////// CLOCK //////////
	input 		          		ADC_CLK_10,
	input 		          		MAX10_CLK1_50,
	input 		          		MAX10_CLK2_50,

	//////////// SDRAM //////////
	output		    [12:0]		DRAM_ADDR,
	output		     [1:0]		DRAM_BA,
	output		          		DRAM_CAS_N,
	output		          		DRAM_CKE,
	output		          		DRAM_CLK,
	output		          		DRAM_CS_N,
	inout 		    [15:0]		DRAM_DQ,
	output		          		DRAM_LDQM,
	output		          		DRAM_RAS_N,
	output		          		DRAM_UDQM,
	output		          		DRAM_WE_N,

	//////////// SEG7 //////////
	output reg		     [7:0]		HEX0,
	output reg		     [7:0]		HEX1,
	output reg		     [7:0]		HEX2,
	output reg		     [7:0]		HEX3,
	output reg		     [7:0]		HEX4,
	output reg		     [7:0]		HEX5,

	//////////// KEY //////////
	input 		     [1:0]		KEY,

	//////////// LED //////////
	output reg		     [9:0]		LEDR,

	//////////// SW //////////
	input 		     [9:0]		SW,

	//////////// VGA //////////
	output		     [3:0]		VGA_B,
	output		     [3:0]		VGA_G,
	output		          		VGA_HS,
	output		     [3:0]		VGA_R,
	output		          		VGA_VS,

	//////////// Accelerometer //////////
	output		          		GSENSOR_CS_N,
	input 		     [2:1]		GSENSOR_INT,
	output		          		GSENSOR_SCLK,
	inout 		          		GSENSOR_SDI,
	inout 		          		GSENSOR_SDO,

	//////////// Arduino //////////
	inout 		    [15:0]		ARDUINO_IO,
	inout 		          		ARDUINO_RESET_N,

	//////////// GPIO, GPIO connect to GPIO Default //////////
	inout 		    [35:0]		GPIO
);



//=======================================================
//  REG/WIRE declarations
//=======================================================




//=======================================================
//  Structural coding
//=======================================================
//						           1			11	    	111		     1111          11111
parameter blank=8'b0000_0000, first=8'h01, second=8'h03, third=8'h07, fourth=8'h0F, fifth=8'h1F,
				A=8'b0111_0111, B=8'b0111_1100, C=8'b0011_1001, D=8'b0101_1110, E=8'b0111_1001,
				F=8'b0111_0001, G=8'b0011_1101, H=8'b0111_0110, I=8'b0000_0110, J=8'b0001_1110,
				K=8'b0111_0110, L=8'b0011_1000, N=8'b0011_0111, O=8'b0011_1111, S=8'b0110_1101,
				U=8'b0011_1110, Y=8'b0110_1110;

always@(SW)
begin
	LEDR <= SW;
	case(SW)
		first: // when SW == first
		begin
			HEX0 <= ~L;
			HEX1 <= ~blank;
			HEX2 <= ~blank;
			HEX3 <= ~blank;
			HEX4 <= ~blank;
			HEX5 <= ~blank;
		end

		second:
		begin
			HEX0 <= ~O;
			HEX1 <= ~L;
			HEX2 <= ~blank;
			HEX3 <= ~blank;
			HEX4 <= ~blank;
			HEX5 <= ~blank;
		end

		third:
		begin
			HEX0 <= ~U;
			HEX1 <= ~O;
			HEX2 <= ~L;
			HEX3 <= ~blank;
			HEX4 <= ~blank;
			HEX5 <= ~blank;
		end

		fourth:
		begin
			HEX0 <= ~I;
			HEX1 <= ~U;
			HEX2 <= ~O;
			HEX3 <= ~L;
			HEX4 <= ~blank;
			HEX5 <= ~blank;
		end

		fifth:
		begin
			HEX0 <= ~S;
			HEX1 <= ~I;
			HEX2 <= ~U;
			HEX3 <= ~O;
			HEX4 <= ~L;
			HEX5 <= ~blank;
		end
		default:
		begin
			HEX0 <= ~blank;
			HEX1 <= ~blank;
			HEX2 <= ~blank;
			HEX3 <= ~blank;
			HEX4 <= ~blank;
			HEX5 <= ~blank;
		end
	endcase
end

endmodule
