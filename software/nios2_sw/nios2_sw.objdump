
nios2_sw.elf:     file format elf32-littlenios2
nios2_sw.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00020230

Program Header:
    LOAD off    0x00001000 vaddr 0x00020000 paddr 0x00020000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00020020 paddr 0x00020020 align 2**12
         filesz 0x00000fc0 memsz 0x00000fc0 flags r-x
    LOAD off    0x00001fe0 vaddr 0x00020fe0 paddr 0x000215d0 align 2**12
         filesz 0x000005f0 memsz 0x000005f0 flags rw-
    LOAD off    0x00002bc0 vaddr 0x00021bc0 paddr 0x00021bc0 align 2**12
         filesz 0x00000000 memsz 0x0000011c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00020000  00020000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  00020020  00020020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00000da0  00020230  00020230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000010  00020fd0  00020fd0  00001fd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000005f0  00020fe0  000215d0  00001fe0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000011c  00021bc0  00021bc0  00002bc0  2**2
                  ALLOC, SMALL_DATA
  6 .RAM          00000000  00021cdc  00021cdc  000025d0  2**0
                  CONTENTS
  7 .ROM          00000000  00041000  00041000  000025d0  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  000025d0  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 000003b8  00000000  00000000  000025f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   000044b9  00000000  00000000  000029b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000016c4  00000000  00000000  00006e69  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00001623  00000000  00000000  0000852d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00000614  00000000  00000000  00009b50  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00001539  00000000  00000000  0000a164  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00000430  00000000  00000000  0000b69d  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000010  00000000  00000000  0000bad0  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000100  00000000  00000000  0000bae0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0000d046  2**0
                  CONTENTS, READONLY
 19 .cpu          00000003  00000000  00000000  0000d049  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0000d04c  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0000d04d  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   00000004  00000000  00000000  0000d04e  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    00000004  00000000  00000000  0000d052  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   00000004  00000000  00000000  0000d056  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 00000005  00000000  00000000  0000d05a  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 00000040  00000000  00000000  0000d05f  2**0
                  CONTENTS, READONLY
 27 .jdi          00003182  00000000  00000000  0000d09f  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     00066a9b  00000000  00000000  00010221  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00020000 l    d  .entry	00000000 .entry
00020020 l    d  .exceptions	00000000 .exceptions
00020230 l    d  .text	00000000 .text
00020fd0 l    d  .rodata	00000000 .rodata
00020fe0 l    d  .rwdata	00000000 .rwdata
00021bc0 l    d  .bss	00000000 .bss
00021cdc l    d  .RAM	00000000 .RAM
00041000 l    d  .ROM	00000000 .ROM
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../nios2_sw_bsp//obj/HAL/src/crt0.o
00020268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 max10_nios2_interrupt.c
0002036c l     F .text	0000005c handle_button_interrupts
000203c8 l     F .text	0000006c init_button_pio
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
00020768 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 alt_close.c
0002090c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00020a40 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
00021188 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_exit.c
00021bd4 g     O .bss	00000004 alt_instruction_exception_handler
00020854 g     F .text	00000060 alt_main
00021bdc g     O .bss	00000100 alt_irq
000215d0 g       *ABS*	00000000 __flash_rwdata_start
00020c6c g     F .text	00000024 altera_nios2_gen2_irq_init
00020000 g     F .entry	0000000c __reset
00021bc0 g     O .bss	00000004 edge_capture
00020020 g       *ABS*	00000000 __flash_exceptions_start
00021bd8 g     O .bss	00000004 errno
00021bcc g     O .bss	00000004 alt_argv
000295ac g       *ABS*	00000000 _gp
00021008 g     O .rwdata	00000180 alt_fd_list
00020fd0 g       *ABS*	00000000 __DTOR_END__
00020b4c g     F .text	0000009c alt_exception_cause_generated_bad_addr
000215c0 g     O .rwdata	00000004 alt_max_fd
000215c8 g     O .rwdata	00000004 _global_impure_ptr
00021cdc g       *ABS*	00000000 __bss_end
00020678 g     F .text	000000f0 alt_iic_isr_register
0002026c g     F .text	00000080 myISR
00041000 g       *ABS*	00000000 __alt_mem_ROM
0002062c g     F .text	0000004c alt_ic_irq_enabled
00021bc4 g     O .bss	00000004 alt_irq_active
000200fc g     F .exceptions	000000d4 alt_irq_handler
00020fe0 g     O .rwdata	00000028 alt_dev_null
00020a20 g     F .text	00000020 alt_dcache_flush_all
000215d0 g       *ABS*	00000000 __ram_rwdata_end
000215b8 g     O .rwdata	00000008 alt_dev_list
00020fe0 g       *ABS*	00000000 __ram_rodata_end
00021cdc g       *ABS*	00000000 end
000201d0 g     F .exceptions	00000060 alt_instruction_exception_entry
00020fd0 g       *ABS*	00000000 __CTOR_LIST__
00039000 g       *ABS*	00000000 __alt_stack_pointer
00020df4 g     F .text	00000180 __call_exitprocs
00020230 g     F .text	0000003c _start
000208ec g     F .text	00000020 alt_sys_init
00020cdc g     F .text	00000118 __register_exitproc
00020f74 g     F .text	00000028 .hidden __mulsi3
00020fe0 g       *ABS*	00000000 __ram_rwdata_start
00020fd0 g       *ABS*	00000000 __ram_rodata_start
00021cdc g       *ABS*	00000000 __alt_stack_base
00021bc0 g       *ABS*	00000000 __bss_start
00020434 g     F .text	00000094 main
00020000 g       *ABS*	00000000 __alt_mem_RAM
00021bd0 g     O .bss	00000004 alt_envp
000215c4 g     O .rwdata	00000004 alt_errno
00020fd0 g       *ABS*	00000000 __CTOR_END__
00020fd0 g       *ABS*	00000000 __flash_rodata_start
00020fd0 g       *ABS*	00000000 __DTOR_LIST__
000208b4 g     F .text	00000038 alt_irq_init
00020be8 g     F .text	00000084 alt_release_fd
00020c90 g     F .text	00000014 atexit
000215cc g     O .rwdata	00000004 _impure_ptr
00021bc8 g     O .bss	00000004 alt_argc
00020acc g     F .text	00000060 _do_dtors
00020020 g       .exceptions	00000000 alt_irq_entry
000215b0 g     O .rwdata	00000008 alt_fs_list
00020020 g       *ABS*	00000000 __ram_exceptions_start
000204c8 g     F .text	00000050 alt_ic_isr_register
000215d0 g       *ABS*	00000000 _edata
00021cdc g       *ABS*	00000000 _end
00020230 g       *ABS*	00000000 __ram_exceptions_end
000205a0 g     F .text	0000008c alt_ic_irq_disable
00020ca4 g     F .text	00000038 exit
000202ec g     F .text	00000080 resetHEX
00039000 g       *ABS*	00000000 __alt_data_end
00020020 g     F .exceptions	00000000 alt_exception
00020f9c g     F .text	00000034 _exit
00020b2c g     F .text	00000020 alt_icache_flush_all
000215ac g     O .rwdata	00000004 alt_priority_mask
00020518 g     F .text	00000088 alt_ic_irq_enable
00020a6c g     F .text	00000060 _do_ctors
00020948 g     F .text	000000d8 close
000207d0 g     F .text	00000084 alt_load



Disassembly of section .entry:

00020000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   20000:	004000b4 	movhi	at,2
    ori r1, r1, %lo(_start)
   20004:	08408c14 	ori	at,at,560
    jmp r1
   20008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00020020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   20020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   20024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   20028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   2002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   20030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   20034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   20038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   2003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   20040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   20044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   20048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   2004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   20050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   20054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   20058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   2005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   20060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   20064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   20068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   2006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   20070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   20074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   20078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   2007c:	10000326 	beq	r2,zero,2008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   20080:	20000226 	beq	r4,zero,2008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   20084:	00200fc0 	call	200fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   20088:	00000706 	br	200a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   2008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   20090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   20094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   20098:	00201d00 	call	201d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   2009c:	1000021e 	bne	r2,zero,200a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   200a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   200a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   200a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   200ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   200b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   200b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   200b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   200bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   200c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   200c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   200c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   200cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   200d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   200d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   200d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   200dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   200e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   200e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   200e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   200ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   200f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   200f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   200f8:	ef80083a 	eret

000200fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   200fc:	defff904 	addi	sp,sp,-28
   20100:	dfc00615 	stw	ra,24(sp)
   20104:	df000515 	stw	fp,20(sp)
   20108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   2010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   20110:	0005313a 	rdctl	r2,ipending
   20114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   20118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   2011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   20120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   20124:	00800044 	movi	r2,1
   20128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   2012c:	e0fffb17 	ldw	r3,-20(fp)
   20130:	e0bffc17 	ldw	r2,-16(fp)
   20134:	1884703a 	and	r2,r3,r2
   20138:	10001426 	beq	r2,zero,2018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   2013c:	008000b4 	movhi	r2,2
   20140:	1086f704 	addi	r2,r2,7132
   20144:	e0fffd17 	ldw	r3,-12(fp)
   20148:	180690fa 	slli	r3,r3,3
   2014c:	10c5883a 	add	r2,r2,r3
   20150:	10c00017 	ldw	r3,0(r2)
   20154:	008000b4 	movhi	r2,2
   20158:	1086f704 	addi	r2,r2,7132
   2015c:	e13ffd17 	ldw	r4,-12(fp)
   20160:	200890fa 	slli	r4,r4,3
   20164:	1105883a 	add	r2,r2,r4
   20168:	10800104 	addi	r2,r2,4
   2016c:	10800017 	ldw	r2,0(r2)
   20170:	1009883a 	mov	r4,r2
   20174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   20178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   2017c:	0005313a 	rdctl	r2,ipending
   20180:	e0bfff15 	stw	r2,-4(fp)

  return active;
   20184:	e0bfff17 	ldw	r2,-4(fp)
   20188:	00000706 	br	201a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   2018c:	e0bffc17 	ldw	r2,-16(fp)
   20190:	1085883a 	add	r2,r2,r2
   20194:	e0bffc15 	stw	r2,-16(fp)
      i++;
   20198:	e0bffd17 	ldw	r2,-12(fp)
   2019c:	10800044 	addi	r2,r2,1
   201a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   201a4:	003fe106 	br	2012c <__alt_mem_ROM+0xfffdf12c>

    active = alt_irq_pending ();
   201a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   201ac:	e0bffb17 	ldw	r2,-20(fp)
   201b0:	103fdb1e 	bne	r2,zero,20120 <__alt_mem_ROM+0xfffdf120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   201b4:	0001883a 	nop
}
   201b8:	0001883a 	nop
   201bc:	e037883a 	mov	sp,fp
   201c0:	dfc00117 	ldw	ra,4(sp)
   201c4:	df000017 	ldw	fp,0(sp)
   201c8:	dec00204 	addi	sp,sp,8
   201cc:	f800283a 	ret

000201d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   201d0:	defffb04 	addi	sp,sp,-20
   201d4:	dfc00415 	stw	ra,16(sp)
   201d8:	df000315 	stw	fp,12(sp)
   201dc:	df000304 	addi	fp,sp,12
   201e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
   201e4:	00bfffc4 	movi	r2,-1
   201e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
   201ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   201f0:	d0a18a17 	ldw	r2,-31192(gp)
   201f4:	10000726 	beq	r2,zero,20214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   201f8:	d0a18a17 	ldw	r2,-31192(gp)
   201fc:	e0fffd17 	ldw	r3,-12(fp)
   20200:	e1bffe17 	ldw	r6,-8(fp)
   20204:	e17fff17 	ldw	r5,-4(fp)
   20208:	1809883a 	mov	r4,r3
   2020c:	103ee83a 	callr	r2
   20210:	00000206 	br	2021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   20214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   20218:	0005883a 	mov	r2,zero
}
   2021c:	e037883a 	mov	sp,fp
   20220:	dfc00117 	ldw	ra,4(sp)
   20224:	df000017 	ldw	fp,0(sp)
   20228:	dec00204 	addi	sp,sp,8
   2022c:	f800283a 	ret

Disassembly of section .text:

00020230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   20230:	06c000f4 	movhi	sp,3
    ori sp, sp, %lo(__alt_stack_pointer)
   20234:	dee40014 	ori	sp,sp,36864
    movhi gp, %hi(_gp)
   20238:	068000b4 	movhi	gp,2
    ori gp, gp, %lo(_gp)
   2023c:	d6a56b14 	ori	gp,gp,38316
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   20240:	008000b4 	movhi	r2,2
    ori r2, r2, %lo(__bss_start)
   20244:	1086f014 	ori	r2,r2,7104

    movhi r3, %hi(__bss_end)
   20248:	00c000b4 	movhi	r3,2
    ori r3, r3, %lo(__bss_end)
   2024c:	18c73714 	ori	r3,r3,7388

    beq r2, r3, 1f
   20250:	10c00326 	beq	r2,r3,20260 <_start+0x30>

0:
    stw zero, (r2)
   20254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   20258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   2025c:	10fffd36 	bltu	r2,r3,20254 <__alt_mem_ROM+0xfffdf254>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   20260:	00207d00 	call	207d0 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   20264:	00208540 	call	20854 <alt_main>

00020268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   20268:	003fff06 	br	20268 <__alt_mem_ROM+0xfffdf268>

0002026c <myISR>:

volatile int edge_capture;
void alt_ic_isr_register();

void myISR()
{
   2026c:	deffff04 	addi	sp,sp,-4
   20270:	df000015 	stw	fp,0(sp)
   20274:	d839883a 	mov	fp,sp
	IOWR(HEX5_BASE, 0, 0xFF);
   20278:	00c03fc4 	movi	r3,255
   2027c:	00800134 	movhi	r2,4
   20280:	10841404 	addi	r2,r2,4176
   20284:	10c00035 	stwio	r3,0(r2)
	IOWR(HEX4_BASE, 0, 0xF9); // I
   20288:	00c03e44 	movi	r3,249
   2028c:	00800134 	movhi	r2,4
   20290:	10841004 	addi	r2,r2,4160
   20294:	10c00035 	stwio	r3,0(r2)
	IOWR(HEX3_BASE, 0, 0xAB); // n
   20298:	00c02ac4 	movi	r3,171
   2029c:	00800134 	movhi	r2,4
   202a0:	10841804 	addi	r2,r2,4192
   202a4:	10c00035 	stwio	r3,0(r2)
	IOWR(HEX2_BASE, 0, 0x87); // t
   202a8:	00c021c4 	movi	r3,135
   202ac:	00800134 	movhi	r2,4
   202b0:	10841c04 	addi	r2,r2,4208
   202b4:	10c00035 	stwio	r3,0(r2)
	IOWR(HEX1_BASE, 0, 0xFF);
   202b8:	00c03fc4 	movi	r3,255
   202bc:	00800134 	movhi	r2,4
   202c0:	10842004 	addi	r2,r2,4224
   202c4:	10c00035 	stwio	r3,0(r2)
	IOWR(HEX0_BASE, 0, 0xFF);
   202c8:	00c03fc4 	movi	r3,255
   202cc:	00800134 	movhi	r2,4
   202d0:	10842404 	addi	r2,r2,4240
   202d4:	10c00035 	stwio	r3,0(r2)
}
   202d8:	0001883a 	nop
   202dc:	e037883a 	mov	sp,fp
   202e0:	df000017 	ldw	fp,0(sp)
   202e4:	dec00104 	addi	sp,sp,4
   202e8:	f800283a 	ret

000202ec <resetHEX>:

void resetHEX()
{
   202ec:	deffff04 	addi	sp,sp,-4
   202f0:	df000015 	stw	fp,0(sp)
   202f4:	d839883a 	mov	fp,sp
	IOWR(HEX5_BASE, 0, HEX5_RESET_VALUE);
   202f8:	00c02244 	movi	r3,137
   202fc:	00800134 	movhi	r2,4
   20300:	10841404 	addi	r2,r2,4176
   20304:	10c00035 	stwio	r3,0(r2)
	IOWR(HEX4_BASE, 0, HEX4_RESET_VALUE);
   20308:	00c02184 	movi	r3,134
   2030c:	00800134 	movhi	r2,4
   20310:	10841004 	addi	r2,r2,4160
   20314:	10c00035 	stwio	r3,0(r2)
	IOWR(HEX3_BASE, 0, HEX3_RESET_VALUE);
   20318:	00c031c4 	movi	r3,199
   2031c:	00800134 	movhi	r2,4
   20320:	10841804 	addi	r2,r2,4192
   20324:	10c00035 	stwio	r3,0(r2)
	IOWR(HEX2_BASE, 0, HEX2_RESET_VALUE);
   20328:	00c031c4 	movi	r3,199
   2032c:	00800134 	movhi	r2,4
   20330:	10841c04 	addi	r2,r2,4208
   20334:	10c00035 	stwio	r3,0(r2)
	IOWR(HEX1_BASE, 0, HEX1_RESET_VALUE);
   20338:	00c01004 	movi	r3,64
   2033c:	00800134 	movhi	r2,4
   20340:	10842004 	addi	r2,r2,4224
   20344:	10c00035 	stwio	r3,0(r2)
	IOWR(HEX0_BASE, 0, HEX0_RESET_VALUE);
   20348:	00c01fc4 	movi	r3,127
   2034c:	00800134 	movhi	r2,4
   20350:	10842404 	addi	r2,r2,4240
   20354:	10c00035 	stwio	r3,0(r2)
}
   20358:	0001883a 	nop
   2035c:	e037883a 	mov	sp,fp
   20360:	df000017 	ldw	fp,0(sp)
   20364:	dec00104 	addi	sp,sp,4
   20368:	f800283a 	ret

0002036c <handle_button_interrupts>:

static void handle_button_interrupts(void* context)
{
   2036c:	defffc04 	addi	sp,sp,-16
   20370:	dfc00315 	stw	ra,12(sp)
   20374:	df000215 	stw	fp,8(sp)
   20378:	df000204 	addi	fp,sp,8
   2037c:	e13fff15 	stw	r4,-4(fp)
	// Cast context to edge_capture's type
	// Volatile to avoid compiler optimization.
	volatile int* edge_capture_ptr = (volatile int*) context;
   20380:	e0bfff17 	ldw	r2,-4(fp)
   20384:	e0bffe15 	stw	r2,-8(fp)

	// Read the edge capture register on the
	// button PIO and store value
	*edge_capture_ptr = IORD_ALTERA_AVALON_PIO_EDGE_CAP(BUTTON_BASE);
   20388:	00800134 	movhi	r2,4
   2038c:	10842b04 	addi	r2,r2,4268
   20390:	10c00037 	ldwio	r3,0(r2)
   20394:	e0bffe17 	ldw	r2,-8(fp)
   20398:	10c00015 	stw	r3,0(r2)

	// Write to the edge capture register to reset it
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BUTTON_BASE, 0);
   2039c:	0007883a 	mov	r3,zero
   203a0:	00800134 	movhi	r2,4
   203a4:	10842b04 	addi	r2,r2,4268
   203a8:	10c00035 	stwio	r3,0(r2)

	myISR();
   203ac:	002026c0 	call	2026c <myISR>
}
   203b0:	0001883a 	nop
   203b4:	e037883a 	mov	sp,fp
   203b8:	dfc00117 	ldw	ra,4(sp)
   203bc:	df000017 	ldw	fp,0(sp)
   203c0:	dec00204 	addi	sp,sp,8
   203c4:	f800283a 	ret

000203c8 <init_button_pio>:

static void init_button_pio()
{
   203c8:	defffc04 	addi	sp,sp,-16
   203cc:	dfc00315 	stw	ra,12(sp)
   203d0:	df000215 	stw	fp,8(sp)
   203d4:	df000204 	addi	fp,sp,8
	// Recast the edge_capture pointer to match the
	// alt_irq_register() function prototype
	void* edge_capture_ptr = (void*) &edge_capture;
   203d8:	d0a18504 	addi	r2,gp,-31212
   203dc:	e0bfff15 	stw	r2,-4(fp)

	// Enable all 4 button interrupts
	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(BUTTON_BASE, 0xf);
   203e0:	00c003c4 	movi	r3,15
   203e4:	00800134 	movhi	r2,4
   203e8:	10842a04 	addi	r2,r2,4264
   203ec:	10c00035 	stwio	r3,0(r2)

	// Reset the edge capture register
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BUTTON_BASE, 0x0);
   203f0:	0007883a 	mov	r3,zero
   203f4:	00800134 	movhi	r2,4
   203f8:	10842b04 	addi	r2,r2,4268
   203fc:	10c00035 	stwio	r3,0(r2)

	// Register the ISR
	alt_ic_isr_register(
   20400:	d8000015 	stw	zero,0(sp)
   20404:	e1ffff17 	ldw	r7,-4(fp)
   20408:	018000b4 	movhi	r6,2
   2040c:	3180db04 	addi	r6,r6,876
   20410:	000b883a 	mov	r5,zero
   20414:	0009883a 	mov	r4,zero
   20418:	00204c80 	call	204c8 <alt_ic_isr_register>
			BUTTON_IRQ_INTERRUPT_CONTROLLER_ID,
			BUTTON_IRQ,
			handle_button_interrupts,
			edge_capture_ptr, 0x0);
}
   2041c:	0001883a 	nop
   20420:	e037883a 	mov	sp,fp
   20424:	dfc00117 	ldw	ra,4(sp)
   20428:	df000017 	ldw	fp,0(sp)
   2042c:	dec00204 	addi	sp,sp,8
   20430:	f800283a 	ret

00020434 <main>:

int main()
{
   20434:	defffb04 	addi	sp,sp,-20
   20438:	dfc00415 	stw	ra,16(sp)
   2043c:	df000315 	stw	fp,12(sp)
   20440:	df000304 	addi	fp,sp,12
	int i = 0, rom_data = 0x00;
   20444:	e03ffd15 	stw	zero,-12(fp)
   20448:	e03ffe15 	stw	zero,-8(fp)
	init_button_pio();
   2044c:	00203c80 	call	203c8 <init_button_pio>

	while (1)
	{
		if (i < 0x10)
   20450:	e0bffd17 	ldw	r2,-12(fp)
   20454:	10800408 	cmpgei	r2,r2,16
   20458:	1000181e 	bne	r2,zero,204bc <main+0x88>
		{
			IOWR_ALTERA_AVALON_PIO_DATA(LED_BASE, rom_data);
   2045c:	00800134 	movhi	r2,4
   20460:	10842c04 	addi	r2,r2,4272
   20464:	e0fffe17 	ldw	r3,-8(fp)
   20468:	10c00035 	stwio	r3,0(r2)
			rom_data = IORD_16DIRECT(ROM_BASE, i);
   2046c:	e0fffd17 	ldw	r3,-12(fp)
   20470:	00800134 	movhi	r2,4
   20474:	10840004 	addi	r2,r2,4096
   20478:	1885883a 	add	r2,r3,r2
   2047c:	1080002b 	ldhuio	r2,0(r2)
   20480:	10bfffcc 	andi	r2,r2,65535
   20484:	e0bffe15 	stw	r2,-8(fp)
			i += 2;
   20488:	e0bffd17 	ldw	r2,-12(fp)
   2048c:	10800084 	addi	r2,r2,2
   20490:	e0bffd15 	stw	r2,-12(fp)
			for (int a = 0; a <= 100000; a++){}
   20494:	e03fff15 	stw	zero,-4(fp)
   20498:	00000306 	br	204a8 <main+0x74>
   2049c:	e0bfff17 	ldw	r2,-4(fp)
   204a0:	10800044 	addi	r2,r2,1
   204a4:	e0bfff15 	stw	r2,-4(fp)
   204a8:	e0ffff17 	ldw	r3,-4(fp)
   204ac:	008000b4 	movhi	r2,2
   204b0:	10a1a804 	addi	r2,r2,-31072
   204b4:	10fff90e 	bge	r2,r3,2049c <__alt_mem_ROM+0xfffdf49c>
   204b8:	00000106 	br	204c0 <main+0x8c>
			//usleep(100000);
		} else {
			i = 0x00;
   204bc:	e03ffd15 	stw	zero,-12(fp)
		}
		resetHEX();
   204c0:	00202ec0 	call	202ec <resetHEX>
	}
   204c4:	003fe206 	br	20450 <__alt_mem_ROM+0xfffdf450>

000204c8 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   204c8:	defff904 	addi	sp,sp,-28
   204cc:	dfc00615 	stw	ra,24(sp)
   204d0:	df000515 	stw	fp,20(sp)
   204d4:	df000504 	addi	fp,sp,20
   204d8:	e13ffc15 	stw	r4,-16(fp)
   204dc:	e17ffd15 	stw	r5,-12(fp)
   204e0:	e1bffe15 	stw	r6,-8(fp)
   204e4:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   204e8:	e0800217 	ldw	r2,8(fp)
   204ec:	d8800015 	stw	r2,0(sp)
   204f0:	e1ffff17 	ldw	r7,-4(fp)
   204f4:	e1bffe17 	ldw	r6,-8(fp)
   204f8:	e17ffd17 	ldw	r5,-12(fp)
   204fc:	e13ffc17 	ldw	r4,-16(fp)
   20500:	00206780 	call	20678 <alt_iic_isr_register>
}  
   20504:	e037883a 	mov	sp,fp
   20508:	dfc00117 	ldw	ra,4(sp)
   2050c:	df000017 	ldw	fp,0(sp)
   20510:	dec00204 	addi	sp,sp,8
   20514:	f800283a 	ret

00020518 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   20518:	defff904 	addi	sp,sp,-28
   2051c:	df000615 	stw	fp,24(sp)
   20520:	df000604 	addi	fp,sp,24
   20524:	e13ffe15 	stw	r4,-8(fp)
   20528:	e17fff15 	stw	r5,-4(fp)
   2052c:	e0bfff17 	ldw	r2,-4(fp)
   20530:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   20534:	0005303a 	rdctl	r2,status
   20538:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2053c:	e0fffb17 	ldw	r3,-20(fp)
   20540:	00bfff84 	movi	r2,-2
   20544:	1884703a 	and	r2,r3,r2
   20548:	1001703a 	wrctl	status,r2
  
  return context;
   2054c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   20550:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   20554:	00c00044 	movi	r3,1
   20558:	e0bffa17 	ldw	r2,-24(fp)
   2055c:	1884983a 	sll	r2,r3,r2
   20560:	1007883a 	mov	r3,r2
   20564:	d0a18617 	ldw	r2,-31208(gp)
   20568:	1884b03a 	or	r2,r3,r2
   2056c:	d0a18615 	stw	r2,-31208(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   20570:	d0a18617 	ldw	r2,-31208(gp)
   20574:	100170fa 	wrctl	ienable,r2
   20578:	e0bffc17 	ldw	r2,-16(fp)
   2057c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   20580:	e0bffd17 	ldw	r2,-12(fp)
   20584:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   20588:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   2058c:	0001883a 	nop
}
   20590:	e037883a 	mov	sp,fp
   20594:	df000017 	ldw	fp,0(sp)
   20598:	dec00104 	addi	sp,sp,4
   2059c:	f800283a 	ret

000205a0 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   205a0:	defff904 	addi	sp,sp,-28
   205a4:	df000615 	stw	fp,24(sp)
   205a8:	df000604 	addi	fp,sp,24
   205ac:	e13ffe15 	stw	r4,-8(fp)
   205b0:	e17fff15 	stw	r5,-4(fp)
   205b4:	e0bfff17 	ldw	r2,-4(fp)
   205b8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   205bc:	0005303a 	rdctl	r2,status
   205c0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   205c4:	e0fffb17 	ldw	r3,-20(fp)
   205c8:	00bfff84 	movi	r2,-2
   205cc:	1884703a 	and	r2,r3,r2
   205d0:	1001703a 	wrctl	status,r2
  
  return context;
   205d4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   205d8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   205dc:	00c00044 	movi	r3,1
   205e0:	e0bffa17 	ldw	r2,-24(fp)
   205e4:	1884983a 	sll	r2,r3,r2
   205e8:	0084303a 	nor	r2,zero,r2
   205ec:	1007883a 	mov	r3,r2
   205f0:	d0a18617 	ldw	r2,-31208(gp)
   205f4:	1884703a 	and	r2,r3,r2
   205f8:	d0a18615 	stw	r2,-31208(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   205fc:	d0a18617 	ldw	r2,-31208(gp)
   20600:	100170fa 	wrctl	ienable,r2
   20604:	e0bffc17 	ldw	r2,-16(fp)
   20608:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2060c:	e0bffd17 	ldw	r2,-12(fp)
   20610:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   20614:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   20618:	0001883a 	nop
}
   2061c:	e037883a 	mov	sp,fp
   20620:	df000017 	ldw	fp,0(sp)
   20624:	dec00104 	addi	sp,sp,4
   20628:	f800283a 	ret

0002062c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   2062c:	defffc04 	addi	sp,sp,-16
   20630:	df000315 	stw	fp,12(sp)
   20634:	df000304 	addi	fp,sp,12
   20638:	e13ffe15 	stw	r4,-8(fp)
   2063c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   20640:	000530fa 	rdctl	r2,ienable
   20644:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   20648:	00c00044 	movi	r3,1
   2064c:	e0bfff17 	ldw	r2,-4(fp)
   20650:	1884983a 	sll	r2,r3,r2
   20654:	1007883a 	mov	r3,r2
   20658:	e0bffd17 	ldw	r2,-12(fp)
   2065c:	1884703a 	and	r2,r3,r2
   20660:	1004c03a 	cmpne	r2,r2,zero
   20664:	10803fcc 	andi	r2,r2,255
}
   20668:	e037883a 	mov	sp,fp
   2066c:	df000017 	ldw	fp,0(sp)
   20670:	dec00104 	addi	sp,sp,4
   20674:	f800283a 	ret

00020678 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   20678:	defff504 	addi	sp,sp,-44
   2067c:	dfc00a15 	stw	ra,40(sp)
   20680:	df000915 	stw	fp,36(sp)
   20684:	df000904 	addi	fp,sp,36
   20688:	e13ffc15 	stw	r4,-16(fp)
   2068c:	e17ffd15 	stw	r5,-12(fp)
   20690:	e1bffe15 	stw	r6,-8(fp)
   20694:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   20698:	00bffa84 	movi	r2,-22
   2069c:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   206a0:	e0bffd17 	ldw	r2,-12(fp)
   206a4:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   206a8:	e0bff817 	ldw	r2,-32(fp)
   206ac:	10800808 	cmpgei	r2,r2,32
   206b0:	1000271e 	bne	r2,zero,20750 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   206b4:	0005303a 	rdctl	r2,status
   206b8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   206bc:	e0fffb17 	ldw	r3,-20(fp)
   206c0:	00bfff84 	movi	r2,-2
   206c4:	1884703a 	and	r2,r3,r2
   206c8:	1001703a 	wrctl	status,r2
  
  return context;
   206cc:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   206d0:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   206d4:	008000b4 	movhi	r2,2
   206d8:	1086f704 	addi	r2,r2,7132
   206dc:	e0fff817 	ldw	r3,-32(fp)
   206e0:	180690fa 	slli	r3,r3,3
   206e4:	10c5883a 	add	r2,r2,r3
   206e8:	e0fffe17 	ldw	r3,-8(fp)
   206ec:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   206f0:	008000b4 	movhi	r2,2
   206f4:	1086f704 	addi	r2,r2,7132
   206f8:	e0fff817 	ldw	r3,-32(fp)
   206fc:	180690fa 	slli	r3,r3,3
   20700:	10c5883a 	add	r2,r2,r3
   20704:	10800104 	addi	r2,r2,4
   20708:	e0ffff17 	ldw	r3,-4(fp)
   2070c:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   20710:	e0bffe17 	ldw	r2,-8(fp)
   20714:	10000526 	beq	r2,zero,2072c <alt_iic_isr_register+0xb4>
   20718:	e0bff817 	ldw	r2,-32(fp)
   2071c:	100b883a 	mov	r5,r2
   20720:	e13ffc17 	ldw	r4,-16(fp)
   20724:	00205180 	call	20518 <alt_ic_irq_enable>
   20728:	00000406 	br	2073c <alt_iic_isr_register+0xc4>
   2072c:	e0bff817 	ldw	r2,-32(fp)
   20730:	100b883a 	mov	r5,r2
   20734:	e13ffc17 	ldw	r4,-16(fp)
   20738:	00205a00 	call	205a0 <alt_ic_irq_disable>
   2073c:	e0bff715 	stw	r2,-36(fp)
   20740:	e0bffa17 	ldw	r2,-24(fp)
   20744:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   20748:	e0bff917 	ldw	r2,-28(fp)
   2074c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   20750:	e0bff717 	ldw	r2,-36(fp)
}
   20754:	e037883a 	mov	sp,fp
   20758:	dfc00117 	ldw	ra,4(sp)
   2075c:	df000017 	ldw	fp,0(sp)
   20760:	dec00204 	addi	sp,sp,8
   20764:	f800283a 	ret

00020768 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   20768:	defffc04 	addi	sp,sp,-16
   2076c:	df000315 	stw	fp,12(sp)
   20770:	df000304 	addi	fp,sp,12
   20774:	e13ffd15 	stw	r4,-12(fp)
   20778:	e17ffe15 	stw	r5,-8(fp)
   2077c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   20780:	e0fffe17 	ldw	r3,-8(fp)
   20784:	e0bffd17 	ldw	r2,-12(fp)
   20788:	18800c26 	beq	r3,r2,207bc <alt_load_section+0x54>
  {
    while( to != end )
   2078c:	00000806 	br	207b0 <alt_load_section+0x48>
    {
      *to++ = *from++;
   20790:	e0bffe17 	ldw	r2,-8(fp)
   20794:	10c00104 	addi	r3,r2,4
   20798:	e0fffe15 	stw	r3,-8(fp)
   2079c:	e0fffd17 	ldw	r3,-12(fp)
   207a0:	19000104 	addi	r4,r3,4
   207a4:	e13ffd15 	stw	r4,-12(fp)
   207a8:	18c00017 	ldw	r3,0(r3)
   207ac:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   207b0:	e0fffe17 	ldw	r3,-8(fp)
   207b4:	e0bfff17 	ldw	r2,-4(fp)
   207b8:	18bff51e 	bne	r3,r2,20790 <__alt_mem_ROM+0xfffdf790>
    {
      *to++ = *from++;
    }
  }
}
   207bc:	0001883a 	nop
   207c0:	e037883a 	mov	sp,fp
   207c4:	df000017 	ldw	fp,0(sp)
   207c8:	dec00104 	addi	sp,sp,4
   207cc:	f800283a 	ret

000207d0 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   207d0:	defffe04 	addi	sp,sp,-8
   207d4:	dfc00115 	stw	ra,4(sp)
   207d8:	df000015 	stw	fp,0(sp)
   207dc:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   207e0:	018000b4 	movhi	r6,2
   207e4:	31857404 	addi	r6,r6,5584
   207e8:	014000b4 	movhi	r5,2
   207ec:	2943f804 	addi	r5,r5,4064
   207f0:	010000b4 	movhi	r4,2
   207f4:	21057404 	addi	r4,r4,5584
   207f8:	00207680 	call	20768 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   207fc:	018000b4 	movhi	r6,2
   20800:	31808c04 	addi	r6,r6,560
   20804:	014000b4 	movhi	r5,2
   20808:	29400804 	addi	r5,r5,32
   2080c:	010000b4 	movhi	r4,2
   20810:	21000804 	addi	r4,r4,32
   20814:	00207680 	call	20768 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   20818:	018000b4 	movhi	r6,2
   2081c:	3183f804 	addi	r6,r6,4064
   20820:	014000b4 	movhi	r5,2
   20824:	2943f404 	addi	r5,r5,4048
   20828:	010000b4 	movhi	r4,2
   2082c:	2103f404 	addi	r4,r4,4048
   20830:	00207680 	call	20768 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   20834:	0020a200 	call	20a20 <alt_dcache_flush_all>
  alt_icache_flush_all();
   20838:	0020b2c0 	call	20b2c <alt_icache_flush_all>
}
   2083c:	0001883a 	nop
   20840:	e037883a 	mov	sp,fp
   20844:	dfc00117 	ldw	ra,4(sp)
   20848:	df000017 	ldw	fp,0(sp)
   2084c:	dec00204 	addi	sp,sp,8
   20850:	f800283a 	ret

00020854 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   20854:	defffd04 	addi	sp,sp,-12
   20858:	dfc00215 	stw	ra,8(sp)
   2085c:	df000115 	stw	fp,4(sp)
   20860:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   20864:	0009883a 	mov	r4,zero
   20868:	00208b40 	call	208b4 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   2086c:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   20870:	00208ec0 	call	208ec <alt_sys_init>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   20874:	0020a6c0 	call	20a6c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   20878:	010000b4 	movhi	r4,2
   2087c:	2102b304 	addi	r4,r4,2764
   20880:	0020c900 	call	20c90 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   20884:	d0a18717 	ldw	r2,-31204(gp)
   20888:	d0e18817 	ldw	r3,-31200(gp)
   2088c:	d1218917 	ldw	r4,-31196(gp)
   20890:	200d883a 	mov	r6,r4
   20894:	180b883a 	mov	r5,r3
   20898:	1009883a 	mov	r4,r2
   2089c:	00204340 	call	20434 <main>
   208a0:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   208a4:	01000044 	movi	r4,1
   208a8:	00209480 	call	20948 <close>
  exit (result);
   208ac:	e13fff17 	ldw	r4,-4(fp)
   208b0:	0020ca40 	call	20ca4 <exit>

000208b4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   208b4:	defffd04 	addi	sp,sp,-12
   208b8:	dfc00215 	stw	ra,8(sp)
   208bc:	df000115 	stw	fp,4(sp)
   208c0:	df000104 	addi	fp,sp,4
   208c4:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
   208c8:	0020c6c0 	call	20c6c <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   208cc:	00800044 	movi	r2,1
   208d0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   208d4:	0001883a 	nop
   208d8:	e037883a 	mov	sp,fp
   208dc:	dfc00117 	ldw	ra,4(sp)
   208e0:	df000017 	ldw	fp,0(sp)
   208e4:	dec00204 	addi	sp,sp,8
   208e8:	f800283a 	ret

000208ec <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   208ec:	deffff04 	addi	sp,sp,-4
   208f0:	df000015 	stw	fp,0(sp)
   208f4:	d839883a 	mov	fp,sp
}
   208f8:	0001883a 	nop
   208fc:	e037883a 	mov	sp,fp
   20900:	df000017 	ldw	fp,0(sp)
   20904:	dec00104 	addi	sp,sp,4
   20908:	f800283a 	ret

0002090c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2090c:	defffe04 	addi	sp,sp,-8
   20910:	dfc00115 	stw	ra,4(sp)
   20914:	df000015 	stw	fp,0(sp)
   20918:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2091c:	d0a00617 	ldw	r2,-32744(gp)
   20920:	10000326 	beq	r2,zero,20930 <alt_get_errno+0x24>
   20924:	d0a00617 	ldw	r2,-32744(gp)
   20928:	103ee83a 	callr	r2
   2092c:	00000106 	br	20934 <alt_get_errno+0x28>
   20930:	d0a18b04 	addi	r2,gp,-31188
}
   20934:	e037883a 	mov	sp,fp
   20938:	dfc00117 	ldw	ra,4(sp)
   2093c:	df000017 	ldw	fp,0(sp)
   20940:	dec00204 	addi	sp,sp,8
   20944:	f800283a 	ret

00020948 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   20948:	defffb04 	addi	sp,sp,-20
   2094c:	dfc00415 	stw	ra,16(sp)
   20950:	df000315 	stw	fp,12(sp)
   20954:	df000304 	addi	fp,sp,12
   20958:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   2095c:	e0bfff17 	ldw	r2,-4(fp)
   20960:	10000816 	blt	r2,zero,20984 <close+0x3c>
   20964:	01400304 	movi	r5,12
   20968:	e13fff17 	ldw	r4,-4(fp)
   2096c:	0020f740 	call	20f74 <__mulsi3>
   20970:	1007883a 	mov	r3,r2
   20974:	008000b4 	movhi	r2,2
   20978:	10840204 	addi	r2,r2,4104
   2097c:	1885883a 	add	r2,r3,r2
   20980:	00000106 	br	20988 <close+0x40>
   20984:	0005883a 	mov	r2,zero
   20988:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   2098c:	e0bffd17 	ldw	r2,-12(fp)
   20990:	10001926 	beq	r2,zero,209f8 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   20994:	e0bffd17 	ldw	r2,-12(fp)
   20998:	10800017 	ldw	r2,0(r2)
   2099c:	10800417 	ldw	r2,16(r2)
   209a0:	10000626 	beq	r2,zero,209bc <close+0x74>
   209a4:	e0bffd17 	ldw	r2,-12(fp)
   209a8:	10800017 	ldw	r2,0(r2)
   209ac:	10800417 	ldw	r2,16(r2)
   209b0:	e13ffd17 	ldw	r4,-12(fp)
   209b4:	103ee83a 	callr	r2
   209b8:	00000106 	br	209c0 <close+0x78>
   209bc:	0005883a 	mov	r2,zero
   209c0:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   209c4:	e13fff17 	ldw	r4,-4(fp)
   209c8:	0020be80 	call	20be8 <alt_release_fd>
    if (rval < 0)
   209cc:	e0bffe17 	ldw	r2,-8(fp)
   209d0:	1000070e 	bge	r2,zero,209f0 <close+0xa8>
    {
      ALT_ERRNO = -rval;
   209d4:	002090c0 	call	2090c <alt_get_errno>
   209d8:	1007883a 	mov	r3,r2
   209dc:	e0bffe17 	ldw	r2,-8(fp)
   209e0:	0085c83a 	sub	r2,zero,r2
   209e4:	18800015 	stw	r2,0(r3)
      return -1;
   209e8:	00bfffc4 	movi	r2,-1
   209ec:	00000706 	br	20a0c <close+0xc4>
    }
    return 0;
   209f0:	0005883a 	mov	r2,zero
   209f4:	00000506 	br	20a0c <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   209f8:	002090c0 	call	2090c <alt_get_errno>
   209fc:	1007883a 	mov	r3,r2
   20a00:	00801444 	movi	r2,81
   20a04:	18800015 	stw	r2,0(r3)
    return -1;
   20a08:	00bfffc4 	movi	r2,-1
  }
}
   20a0c:	e037883a 	mov	sp,fp
   20a10:	dfc00117 	ldw	ra,4(sp)
   20a14:	df000017 	ldw	fp,0(sp)
   20a18:	dec00204 	addi	sp,sp,8
   20a1c:	f800283a 	ret

00020a20 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   20a20:	deffff04 	addi	sp,sp,-4
   20a24:	df000015 	stw	fp,0(sp)
   20a28:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   20a2c:	0001883a 	nop
   20a30:	e037883a 	mov	sp,fp
   20a34:	df000017 	ldw	fp,0(sp)
   20a38:	dec00104 	addi	sp,sp,4
   20a3c:	f800283a 	ret

00020a40 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   20a40:	defffc04 	addi	sp,sp,-16
   20a44:	df000315 	stw	fp,12(sp)
   20a48:	df000304 	addi	fp,sp,12
   20a4c:	e13ffd15 	stw	r4,-12(fp)
   20a50:	e17ffe15 	stw	r5,-8(fp)
   20a54:	e1bfff15 	stw	r6,-4(fp)
  return len;
   20a58:	e0bfff17 	ldw	r2,-4(fp)
}
   20a5c:	e037883a 	mov	sp,fp
   20a60:	df000017 	ldw	fp,0(sp)
   20a64:	dec00104 	addi	sp,sp,4
   20a68:	f800283a 	ret

00020a6c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   20a6c:	defffd04 	addi	sp,sp,-12
   20a70:	dfc00215 	stw	ra,8(sp)
   20a74:	df000115 	stw	fp,4(sp)
   20a78:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   20a7c:	008000b4 	movhi	r2,2
   20a80:	1083f304 	addi	r2,r2,4044
   20a84:	e0bfff15 	stw	r2,-4(fp)
   20a88:	00000606 	br	20aa4 <_do_ctors+0x38>
        (*ctor) (); 
   20a8c:	e0bfff17 	ldw	r2,-4(fp)
   20a90:	10800017 	ldw	r2,0(r2)
   20a94:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   20a98:	e0bfff17 	ldw	r2,-4(fp)
   20a9c:	10bfff04 	addi	r2,r2,-4
   20aa0:	e0bfff15 	stw	r2,-4(fp)
   20aa4:	e0ffff17 	ldw	r3,-4(fp)
   20aa8:	008000b4 	movhi	r2,2
   20aac:	1083f404 	addi	r2,r2,4048
   20ab0:	18bff62e 	bgeu	r3,r2,20a8c <__alt_mem_ROM+0xfffdfa8c>
        (*ctor) (); 
}
   20ab4:	0001883a 	nop
   20ab8:	e037883a 	mov	sp,fp
   20abc:	dfc00117 	ldw	ra,4(sp)
   20ac0:	df000017 	ldw	fp,0(sp)
   20ac4:	dec00204 	addi	sp,sp,8
   20ac8:	f800283a 	ret

00020acc <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   20acc:	defffd04 	addi	sp,sp,-12
   20ad0:	dfc00215 	stw	ra,8(sp)
   20ad4:	df000115 	stw	fp,4(sp)
   20ad8:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   20adc:	008000b4 	movhi	r2,2
   20ae0:	1083f304 	addi	r2,r2,4044
   20ae4:	e0bfff15 	stw	r2,-4(fp)
   20ae8:	00000606 	br	20b04 <_do_dtors+0x38>
        (*dtor) (); 
   20aec:	e0bfff17 	ldw	r2,-4(fp)
   20af0:	10800017 	ldw	r2,0(r2)
   20af4:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   20af8:	e0bfff17 	ldw	r2,-4(fp)
   20afc:	10bfff04 	addi	r2,r2,-4
   20b00:	e0bfff15 	stw	r2,-4(fp)
   20b04:	e0ffff17 	ldw	r3,-4(fp)
   20b08:	008000b4 	movhi	r2,2
   20b0c:	1083f404 	addi	r2,r2,4048
   20b10:	18bff62e 	bgeu	r3,r2,20aec <__alt_mem_ROM+0xfffdfaec>
        (*dtor) (); 
}
   20b14:	0001883a 	nop
   20b18:	e037883a 	mov	sp,fp
   20b1c:	dfc00117 	ldw	ra,4(sp)
   20b20:	df000017 	ldw	fp,0(sp)
   20b24:	dec00204 	addi	sp,sp,8
   20b28:	f800283a 	ret

00020b2c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   20b2c:	deffff04 	addi	sp,sp,-4
   20b30:	df000015 	stw	fp,0(sp)
   20b34:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   20b38:	0001883a 	nop
   20b3c:	e037883a 	mov	sp,fp
   20b40:	df000017 	ldw	fp,0(sp)
   20b44:	dec00104 	addi	sp,sp,4
   20b48:	f800283a 	ret

00020b4c <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   20b4c:	defffe04 	addi	sp,sp,-8
   20b50:	df000115 	stw	fp,4(sp)
   20b54:	df000104 	addi	fp,sp,4
   20b58:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   20b5c:	e0bfff17 	ldw	r2,-4(fp)
   20b60:	10bffe84 	addi	r2,r2,-6
   20b64:	10c00428 	cmpgeui	r3,r2,16
   20b68:	18001a1e 	bne	r3,zero,20bd4 <alt_exception_cause_generated_bad_addr+0x88>
   20b6c:	100690ba 	slli	r3,r2,2
   20b70:	008000b4 	movhi	r2,2
   20b74:	1082e104 	addi	r2,r2,2948
   20b78:	1885883a 	add	r2,r3,r2
   20b7c:	10800017 	ldw	r2,0(r2)
   20b80:	1000683a 	jmp	r2
   20b84:	00020bc4 	movi	zero,2095
   20b88:	00020bc4 	movi	zero,2095
   20b8c:	00020bd4 	movui	zero,2095
   20b90:	00020bd4 	movui	zero,2095
   20b94:	00020bd4 	movui	zero,2095
   20b98:	00020bc4 	movi	zero,2095
   20b9c:	00020bcc 	andi	zero,zero,2095
   20ba0:	00020bd4 	movui	zero,2095
   20ba4:	00020bc4 	movi	zero,2095
   20ba8:	00020bc4 	movi	zero,2095
   20bac:	00020bd4 	movui	zero,2095
   20bb0:	00020bc4 	movi	zero,2095
   20bb4:	00020bcc 	andi	zero,zero,2095
   20bb8:	00020bd4 	movui	zero,2095
   20bbc:	00020bd4 	movui	zero,2095
   20bc0:	00020bc4 	movi	zero,2095
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   20bc4:	00800044 	movi	r2,1
   20bc8:	00000306 	br	20bd8 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   20bcc:	0005883a 	mov	r2,zero
   20bd0:	00000106 	br	20bd8 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   20bd4:	0005883a 	mov	r2,zero
  }
}
   20bd8:	e037883a 	mov	sp,fp
   20bdc:	df000017 	ldw	fp,0(sp)
   20be0:	dec00104 	addi	sp,sp,4
   20be4:	f800283a 	ret

00020be8 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   20be8:	defffc04 	addi	sp,sp,-16
   20bec:	dfc00315 	stw	ra,12(sp)
   20bf0:	df000215 	stw	fp,8(sp)
   20bf4:	dc000115 	stw	r16,4(sp)
   20bf8:	df000204 	addi	fp,sp,8
   20bfc:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
   20c00:	e0bffe17 	ldw	r2,-8(fp)
   20c04:	108000d0 	cmplti	r2,r2,3
   20c08:	1000111e 	bne	r2,zero,20c50 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   20c0c:	040000b4 	movhi	r16,2
   20c10:	84040204 	addi	r16,r16,4104
   20c14:	e0bffe17 	ldw	r2,-8(fp)
   20c18:	01400304 	movi	r5,12
   20c1c:	1009883a 	mov	r4,r2
   20c20:	0020f740 	call	20f74 <__mulsi3>
   20c24:	8085883a 	add	r2,r16,r2
   20c28:	10800204 	addi	r2,r2,8
   20c2c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   20c30:	040000b4 	movhi	r16,2
   20c34:	84040204 	addi	r16,r16,4104
   20c38:	e0bffe17 	ldw	r2,-8(fp)
   20c3c:	01400304 	movi	r5,12
   20c40:	1009883a 	mov	r4,r2
   20c44:	0020f740 	call	20f74 <__mulsi3>
   20c48:	8085883a 	add	r2,r16,r2
   20c4c:	10000015 	stw	zero,0(r2)
  }
}
   20c50:	0001883a 	nop
   20c54:	e6ffff04 	addi	sp,fp,-4
   20c58:	dfc00217 	ldw	ra,8(sp)
   20c5c:	df000117 	ldw	fp,4(sp)
   20c60:	dc000017 	ldw	r16,0(sp)
   20c64:	dec00304 	addi	sp,sp,12
   20c68:	f800283a 	ret

00020c6c <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   20c6c:	deffff04 	addi	sp,sp,-4
   20c70:	df000015 	stw	fp,0(sp)
   20c74:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   20c78:	000170fa 	wrctl	ienable,zero
}
   20c7c:	0001883a 	nop
   20c80:	e037883a 	mov	sp,fp
   20c84:	df000017 	ldw	fp,0(sp)
   20c88:	dec00104 	addi	sp,sp,4
   20c8c:	f800283a 	ret

00020c90 <atexit>:
   20c90:	200b883a 	mov	r5,r4
   20c94:	000f883a 	mov	r7,zero
   20c98:	000d883a 	mov	r6,zero
   20c9c:	0009883a 	mov	r4,zero
   20ca0:	0020cdc1 	jmpi	20cdc <__register_exitproc>

00020ca4 <exit>:
   20ca4:	defffe04 	addi	sp,sp,-8
   20ca8:	000b883a 	mov	r5,zero
   20cac:	dc000015 	stw	r16,0(sp)
   20cb0:	dfc00115 	stw	ra,4(sp)
   20cb4:	2021883a 	mov	r16,r4
   20cb8:	0020df40 	call	20df4 <__call_exitprocs>
   20cbc:	008000b4 	movhi	r2,2
   20cc0:	10857204 	addi	r2,r2,5576
   20cc4:	11000017 	ldw	r4,0(r2)
   20cc8:	20800f17 	ldw	r2,60(r4)
   20ccc:	10000126 	beq	r2,zero,20cd4 <exit+0x30>
   20cd0:	103ee83a 	callr	r2
   20cd4:	8009883a 	mov	r4,r16
   20cd8:	0020f9c0 	call	20f9c <_exit>

00020cdc <__register_exitproc>:
   20cdc:	defffa04 	addi	sp,sp,-24
   20ce0:	dc000315 	stw	r16,12(sp)
   20ce4:	040000b4 	movhi	r16,2
   20ce8:	84057204 	addi	r16,r16,5576
   20cec:	80c00017 	ldw	r3,0(r16)
   20cf0:	dc400415 	stw	r17,16(sp)
   20cf4:	dfc00515 	stw	ra,20(sp)
   20cf8:	18805217 	ldw	r2,328(r3)
   20cfc:	2023883a 	mov	r17,r4
   20d00:	10003726 	beq	r2,zero,20de0 <__register_exitproc+0x104>
   20d04:	10c00117 	ldw	r3,4(r2)
   20d08:	010007c4 	movi	r4,31
   20d0c:	20c00e16 	blt	r4,r3,20d48 <__register_exitproc+0x6c>
   20d10:	1a000044 	addi	r8,r3,1
   20d14:	8800221e 	bne	r17,zero,20da0 <__register_exitproc+0xc4>
   20d18:	18c00084 	addi	r3,r3,2
   20d1c:	18c7883a 	add	r3,r3,r3
   20d20:	18c7883a 	add	r3,r3,r3
   20d24:	12000115 	stw	r8,4(r2)
   20d28:	10c7883a 	add	r3,r2,r3
   20d2c:	19400015 	stw	r5,0(r3)
   20d30:	0005883a 	mov	r2,zero
   20d34:	dfc00517 	ldw	ra,20(sp)
   20d38:	dc400417 	ldw	r17,16(sp)
   20d3c:	dc000317 	ldw	r16,12(sp)
   20d40:	dec00604 	addi	sp,sp,24
   20d44:	f800283a 	ret
   20d48:	00800034 	movhi	r2,0
   20d4c:	10800004 	addi	r2,r2,0
   20d50:	10002626 	beq	r2,zero,20dec <__register_exitproc+0x110>
   20d54:	01006404 	movi	r4,400
   20d58:	d9400015 	stw	r5,0(sp)
   20d5c:	d9800115 	stw	r6,4(sp)
   20d60:	d9c00215 	stw	r7,8(sp)
   20d64:	00000000 	call	0 <__alt_mem_RAM-0x20000>
   20d68:	d9400017 	ldw	r5,0(sp)
   20d6c:	d9800117 	ldw	r6,4(sp)
   20d70:	d9c00217 	ldw	r7,8(sp)
   20d74:	10001d26 	beq	r2,zero,20dec <__register_exitproc+0x110>
   20d78:	81000017 	ldw	r4,0(r16)
   20d7c:	10000115 	stw	zero,4(r2)
   20d80:	02000044 	movi	r8,1
   20d84:	22405217 	ldw	r9,328(r4)
   20d88:	0007883a 	mov	r3,zero
   20d8c:	12400015 	stw	r9,0(r2)
   20d90:	20805215 	stw	r2,328(r4)
   20d94:	10006215 	stw	zero,392(r2)
   20d98:	10006315 	stw	zero,396(r2)
   20d9c:	883fde26 	beq	r17,zero,20d18 <__alt_mem_ROM+0xfffdfd18>
   20da0:	18c9883a 	add	r4,r3,r3
   20da4:	2109883a 	add	r4,r4,r4
   20da8:	1109883a 	add	r4,r2,r4
   20dac:	21802215 	stw	r6,136(r4)
   20db0:	01800044 	movi	r6,1
   20db4:	12406217 	ldw	r9,392(r2)
   20db8:	30cc983a 	sll	r6,r6,r3
   20dbc:	4992b03a 	or	r9,r9,r6
   20dc0:	12406215 	stw	r9,392(r2)
   20dc4:	21c04215 	stw	r7,264(r4)
   20dc8:	01000084 	movi	r4,2
   20dcc:	893fd21e 	bne	r17,r4,20d18 <__alt_mem_ROM+0xfffdfd18>
   20dd0:	11006317 	ldw	r4,396(r2)
   20dd4:	218cb03a 	or	r6,r4,r6
   20dd8:	11806315 	stw	r6,396(r2)
   20ddc:	003fce06 	br	20d18 <__alt_mem_ROM+0xfffdfd18>
   20de0:	18805304 	addi	r2,r3,332
   20de4:	18805215 	stw	r2,328(r3)
   20de8:	003fc606 	br	20d04 <__alt_mem_ROM+0xfffdfd04>
   20dec:	00bfffc4 	movi	r2,-1
   20df0:	003fd006 	br	20d34 <__alt_mem_ROM+0xfffdfd34>

00020df4 <__call_exitprocs>:
   20df4:	defff504 	addi	sp,sp,-44
   20df8:	df000915 	stw	fp,36(sp)
   20dfc:	dd400615 	stw	r21,24(sp)
   20e00:	dc800315 	stw	r18,12(sp)
   20e04:	dfc00a15 	stw	ra,40(sp)
   20e08:	ddc00815 	stw	r23,32(sp)
   20e0c:	dd800715 	stw	r22,28(sp)
   20e10:	dd000515 	stw	r20,20(sp)
   20e14:	dcc00415 	stw	r19,16(sp)
   20e18:	dc400215 	stw	r17,8(sp)
   20e1c:	dc000115 	stw	r16,4(sp)
   20e20:	d9000015 	stw	r4,0(sp)
   20e24:	2839883a 	mov	fp,r5
   20e28:	04800044 	movi	r18,1
   20e2c:	057fffc4 	movi	r21,-1
   20e30:	008000b4 	movhi	r2,2
   20e34:	10857204 	addi	r2,r2,5576
   20e38:	12000017 	ldw	r8,0(r2)
   20e3c:	45005217 	ldw	r20,328(r8)
   20e40:	44c05204 	addi	r19,r8,328
   20e44:	a0001c26 	beq	r20,zero,20eb8 <__call_exitprocs+0xc4>
   20e48:	a0800117 	ldw	r2,4(r20)
   20e4c:	15ffffc4 	addi	r23,r2,-1
   20e50:	b8000d16 	blt	r23,zero,20e88 <__call_exitprocs+0x94>
   20e54:	14000044 	addi	r16,r2,1
   20e58:	8421883a 	add	r16,r16,r16
   20e5c:	8421883a 	add	r16,r16,r16
   20e60:	84402004 	addi	r17,r16,128
   20e64:	a463883a 	add	r17,r20,r17
   20e68:	a421883a 	add	r16,r20,r16
   20e6c:	e0001e26 	beq	fp,zero,20ee8 <__call_exitprocs+0xf4>
   20e70:	80804017 	ldw	r2,256(r16)
   20e74:	e0801c26 	beq	fp,r2,20ee8 <__call_exitprocs+0xf4>
   20e78:	bdffffc4 	addi	r23,r23,-1
   20e7c:	843fff04 	addi	r16,r16,-4
   20e80:	8c7fff04 	addi	r17,r17,-4
   20e84:	bd7ff91e 	bne	r23,r21,20e6c <__alt_mem_ROM+0xfffdfe6c>
   20e88:	00800034 	movhi	r2,0
   20e8c:	10800004 	addi	r2,r2,0
   20e90:	10000926 	beq	r2,zero,20eb8 <__call_exitprocs+0xc4>
   20e94:	a0800117 	ldw	r2,4(r20)
   20e98:	1000301e 	bne	r2,zero,20f5c <__call_exitprocs+0x168>
   20e9c:	a0800017 	ldw	r2,0(r20)
   20ea0:	10003226 	beq	r2,zero,20f6c <__call_exitprocs+0x178>
   20ea4:	a009883a 	mov	r4,r20
   20ea8:	98800015 	stw	r2,0(r19)
   20eac:	00000000 	call	0 <__alt_mem_RAM-0x20000>
   20eb0:	9d000017 	ldw	r20,0(r19)
   20eb4:	a03fe41e 	bne	r20,zero,20e48 <__alt_mem_ROM+0xfffdfe48>
   20eb8:	dfc00a17 	ldw	ra,40(sp)
   20ebc:	df000917 	ldw	fp,36(sp)
   20ec0:	ddc00817 	ldw	r23,32(sp)
   20ec4:	dd800717 	ldw	r22,28(sp)
   20ec8:	dd400617 	ldw	r21,24(sp)
   20ecc:	dd000517 	ldw	r20,20(sp)
   20ed0:	dcc00417 	ldw	r19,16(sp)
   20ed4:	dc800317 	ldw	r18,12(sp)
   20ed8:	dc400217 	ldw	r17,8(sp)
   20edc:	dc000117 	ldw	r16,4(sp)
   20ee0:	dec00b04 	addi	sp,sp,44
   20ee4:	f800283a 	ret
   20ee8:	a0800117 	ldw	r2,4(r20)
   20eec:	80c00017 	ldw	r3,0(r16)
   20ef0:	10bfffc4 	addi	r2,r2,-1
   20ef4:	15c01426 	beq	r2,r23,20f48 <__call_exitprocs+0x154>
   20ef8:	80000015 	stw	zero,0(r16)
   20efc:	183fde26 	beq	r3,zero,20e78 <__alt_mem_ROM+0xfffdfe78>
   20f00:	95c8983a 	sll	r4,r18,r23
   20f04:	a0806217 	ldw	r2,392(r20)
   20f08:	a5800117 	ldw	r22,4(r20)
   20f0c:	2084703a 	and	r2,r4,r2
   20f10:	10000b26 	beq	r2,zero,20f40 <__call_exitprocs+0x14c>
   20f14:	a0806317 	ldw	r2,396(r20)
   20f18:	2088703a 	and	r4,r4,r2
   20f1c:	20000c1e 	bne	r4,zero,20f50 <__call_exitprocs+0x15c>
   20f20:	89400017 	ldw	r5,0(r17)
   20f24:	d9000017 	ldw	r4,0(sp)
   20f28:	183ee83a 	callr	r3
   20f2c:	a0800117 	ldw	r2,4(r20)
   20f30:	15bfbf1e 	bne	r2,r22,20e30 <__alt_mem_ROM+0xfffdfe30>
   20f34:	98800017 	ldw	r2,0(r19)
   20f38:	153fcf26 	beq	r2,r20,20e78 <__alt_mem_ROM+0xfffdfe78>
   20f3c:	003fbc06 	br	20e30 <__alt_mem_ROM+0xfffdfe30>
   20f40:	183ee83a 	callr	r3
   20f44:	003ff906 	br	20f2c <__alt_mem_ROM+0xfffdff2c>
   20f48:	a5c00115 	stw	r23,4(r20)
   20f4c:	003feb06 	br	20efc <__alt_mem_ROM+0xfffdfefc>
   20f50:	89000017 	ldw	r4,0(r17)
   20f54:	183ee83a 	callr	r3
   20f58:	003ff406 	br	20f2c <__alt_mem_ROM+0xfffdff2c>
   20f5c:	a0800017 	ldw	r2,0(r20)
   20f60:	a027883a 	mov	r19,r20
   20f64:	1029883a 	mov	r20,r2
   20f68:	003fb606 	br	20e44 <__alt_mem_ROM+0xfffdfe44>
   20f6c:	0005883a 	mov	r2,zero
   20f70:	003ffb06 	br	20f60 <__alt_mem_ROM+0xfffdff60>

00020f74 <__mulsi3>:
   20f74:	0005883a 	mov	r2,zero
   20f78:	20000726 	beq	r4,zero,20f98 <__mulsi3+0x24>
   20f7c:	20c0004c 	andi	r3,r4,1
   20f80:	2008d07a 	srli	r4,r4,1
   20f84:	18000126 	beq	r3,zero,20f8c <__mulsi3+0x18>
   20f88:	1145883a 	add	r2,r2,r5
   20f8c:	294b883a 	add	r5,r5,r5
   20f90:	203ffa1e 	bne	r4,zero,20f7c <__alt_mem_ROM+0xfffdff7c>
   20f94:	f800283a 	ret
   20f98:	f800283a 	ret

00020f9c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   20f9c:	defffd04 	addi	sp,sp,-12
   20fa0:	df000215 	stw	fp,8(sp)
   20fa4:	df000204 	addi	fp,sp,8
   20fa8:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   20fac:	0001883a 	nop
   20fb0:	e0bfff17 	ldw	r2,-4(fp)
   20fb4:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   20fb8:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   20fbc:	10000226 	beq	r2,zero,20fc8 <_exit+0x2c>
    ALT_SIM_FAIL();
   20fc0:	002af070 	cmpltui	zero,zero,43969
   20fc4:	00000106 	br	20fcc <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   20fc8:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   20fcc:	003fff06 	br	20fcc <__alt_mem_ROM+0xfffdffcc>
